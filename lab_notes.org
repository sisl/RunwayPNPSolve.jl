#+title: Lab_notes
#+latex_header: \usepackage{siunitx}
#+latex_header: \usepackage[capitalise]{cleveref}
#+latex_header: \usepackage{subcaption}


* TODOs :noexport:

** DONE Implement error plots for x/y/z
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-07-05 Wed 15:51]--[2023-07-05 Wed 16:11] =>  0:20
CLOCK: [2023-07-05 Wed 14:48]--[2023-07-05 Wed 15:40] =>  0:52
:END:

** DONE Find bug (?) why now pose estimates are sometimes under runway
:PROPERTIES:
:Effort:   0:15
:END:
:LOGBOOK:
CLOCK: [2023-07-05 Wed 16:21]--[2023-07-05 Wed 16:31] =>  0:10
CLOCK: [2023-07-05 Wed 16:11]--[2023-07-05 Wed 16:12] =>  0:01
:END:
** TODO Implement Hough Transform and Estimation from lines
*** DONE Visualize lines in 2d and 3d space
:PROPERTIES:
:Effort:   0:15
:END:
:LOGBOOK:
CLOCK: [2023-07-06 Thu 13:15]--[2023-07-06 Thu 13:43] =>  0:28
:END:
*** TODO Investigate math for Hough Transform
:PROPERTIES:
:Effort:   2h
:END:
:LOGBOOK:
CLOCK: [2023-07-06 Thu 13:43]--[2023-07-06 Thu 14:28] =>  0:45
:END:
*** DONE Baseline implementation
:PROPERTIES:
:Effort:   1.5h
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 14:13]--[2023-07-07 Fri 14:32] =>  0:19
CLOCK: [2023-07-07 Fri 12:50]--[2023-07-07 Fri 13:10] =>  0:20
CLOCK: [2023-07-07 Fri 10:21]--<2023-07-07 Fri 10:50> =>  0:29
:END:
**** DONE Fix bug with line vis / computation
:PROPERTIES:
:Effort:   1:00
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 14:49]--[2023-07-07 Fri 15:02] =>  0:13
:END:
Ended up having to use analytic formula and fix index messup
**** DONE Fix second bug
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 15:03]--[2023-07-07 Fri 15:19] =>  0:16
:END:
Pose estimates are wrong when using hough transform information
*** DONE Visualize Hough Transform
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 14:32]--[2023-07-07 Fri 14:48] =>  0:16
:END:
*** DONE Put some more toggles and maybe different noise bar
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 16:15]--[2023-07-07 Fri 17:05] =>  1:20
:END:
- [X] Probably simplify to three use/noise toggles
  + front corners
  + back corners
  + lines
- [X] Print result of optimization problem on click (using DataInspector)
- [-] Maybe make extra noise slider
- [X] When this is all done, probably merge into main.
*** TODO [#A] Investigate optimization convergence problems and bad results with Lines
:PROPERTIES:
:Effort:   0:45
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 17:05]--[2023-07-07 Fri 17:35] =>  0:30
:END:
**** DONE Make debugging plot of optimization landscape
:PROPERTIES:
:Effort:   0:45
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 12:54]--[2023-07-10 Mon 13:42] =>  0:48
CLOCK: [2023-07-10 Mon 10:40]--[2023-07-10 Mon 11:56] =>  1:16
CLOCK: [2023-07-10 Mon 09:52]--[2023-07-10 Mon 10:02] =>  0:10
:END:
- maybe use volumeslices
- or consider contourf, but can only plot f against 2 vars.

**** DONE [#B] Implement perspective shift onto new camera position on click.
***** DONE Refactor projection onto camera position
:PROPERTIES:
:Effort:   0:30
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 14:36]--[2023-07-10 Mon 14:38] =>  0:02
CLOCK: [2023-07-10 Mon 13:51]--[2023-07-10 Mon 13:54] =>  0:03
:END:
***** DONE Refactor "coordiate transformations" using the package
:PROPERTIES:
:Effort:   0:15
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 14:38]--[2023-07-10 Mon 15:10] =>  0:32
:END:
***** DONE Just yield window as a result of a function that takes a position
:PROPERTIES:
:Effort:   0:20
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 15:10]--[2023-07-10 Mon 16:03] =>  0:53
:END:
***** DONE Make two windows, once which is the true position, and one which is the result of a click.
:PROPERTIES:
:Effort:   0:20
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 16:03]--[2023-07-10 Mon 16:14] =>  0:11
:END:
***** DONE +Make a toggle that switches between them. (optional)+
:PROPERTIES:
:Effort:   0:20
:END:
**** DONE [#A] Fix Hough transform bug in some situations.
:PROPERTIES:
:Effort:   0:40
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 17:02]--[2023-07-10 Mon 17:40] =>  0:38
:END:
**** TODO There's still another problem related to the optimization problem...
:PROPERTIES:
:Effort:   0:45
:END:
:LOGBOOK:
CLOCK: [2023-07-11 Tue 10:30]--[2023-07-11 Tue 10:52] =>  0:22
:END:
The problem is that there is a local minimum where $\rho$ has converged, but not $\theta$.
What can we do?
- regularize someohow
- unweigh rho
**** DONE Refactor a bit
:PROPERTIES:
:Effort:   0:35
:END:
:LOGBOOK:
CLOCK: [2023-07-10 Mon 16:18]--[2023-07-10 Mon 17:02] =>  0:44
:END:

** TODO [#A] Fix calibration
*** TODO Understand focal length
:PROPERTIES:
:Effort:   0:25
:END:
*** TODO Understand image width and height
:PROPERTIES:
:Effort:
:END:
*** TODO Understand error in pixels
:PROPERTIES:
:Effort:   0:15
:END:
*** TODO Write plots in pixels and meters
:PROPERTIES:
:Effort:   0:10
:END:
** TODO [#C] Make this into a package
:PROPERTIES:
:Effort:   0:25
:END:



* Sensitivity analysis
- did error on length
- did error on width
- manually did error on pixel pos


* Variations:
** Alongtrack distance
- One shorter runways, using only near or near & far is just about enough when \(\sigma = 1\mathrm{pxl}\).
[[file:./figs/distance_variation_1:2_approach=6.png]]
** Adding more features
[[file:./figs/distance_variation_1:4_approach=6.png]]

- However, we can take information from other runways and incorporate them, which yields substantial benefits while the other runways are in sight.
However, there is a clear performance drop once they go out of sight.

[[file:figs/distance_variation_:_approach=4.png]]

*** Linear error :noexport:
- The error is approximately linear with the pixel error. I.e. here's the last image, but with \(\sigma = 2\mathrm{pxl}\).
[[file:figs/distance_variation_:_approach=4_2pxl.png]]

** +Near / Near&Far / All+
** Different Runways
- data is stored in [[file:min_max_errors_results_(:)][here]] and [[file:min_max_errors_results_(1:2)][here]].
*** Some errors :noexport:
**** x, 1:2
: [ 50.0, 100.0) ┤▏ 3
: [100.0, 150.0) ┤█████▌ 254
: [150.0, 200.0) ┤█████████████████████████████████  1 527
: [200.0, 250.0) ┤███▎ 147
: [250.0, 300.0) ┤▌ 22
: [300.0, 350.0) ┤▊ 38
: [350.0, 400.0) ┤▍ 17
: [400.0, 450.0) ┤▎ 4
**** y, 1:2
: [0.56, 0.57) ┤▉ 19
: [0.57, 0.58) ┤███████▏ 144
: [0.58, 0.59) ┤██████████████████████▉ 467
: [0.59, 0.6 ) ┤███████████████████████████████████  713
: [0.6 , 0.61) ┤███████████████████████▊ 487
: [0.61, 0.62) ┤███████▋ 155
: [0.62, 0.63) ┤█▍ 26
: [0.63, 0.64) ┤▎ 2
**** z, 1:2
: [ 0.0,  2.0) ┤▏ 1
: [ 2.0,  4.0) ┤█████████████████████████████████  1 772
: [ 4.0,  6.0) ┤██▉ 160
: [ 6.0,  8.0) ┤█▎ 67
: [ 8.0, 10.0) ┤▎ 12
**** x, (:)
: [  0.0, 100.0) ┤▏ 2
: [100.0, 200.0) ┤█████████████████████████████████  1 782
: [200.0, 300.0) ┤███▎ 167
: [300.0, 400.0) ┤█▏ 58
: [400.0, 500.0) ┤▏ 3
**** y, (:)
: [0.56, 0.57) ┤▋ 15
: [0.57, 0.58) ┤██████▋ 136
: [0.58, 0.59) ┤██████████████████████▎ 456
: [0.59, 0.6 ) ┤███████████████████████████████████  721
: [0.6 , 0.61) ┤███████████████████████▎ 477
: [0.61, 0.62) ┤████████▌ 174
: [0.62, 0.63) ┤█▌ 31
: [0.63, 0.64) ┤▎ 2
: [0.64, 0.65) ┤▏ 1
**** z, (:)
: [ 0.0,  2.0) ┤▏ 1
: [ 2.0,  4.0) ┤█████████████████████████████████  1 772
: [ 4.0,  6.0) ┤██▉ 160
: [ 6.0,  8.0) ┤█▎ 66
: [ 8.0, 10.0) ┤▎ 13
*** Reproduce
- gen data with
: using PNPSolve; include("scripts/run_simulations.jl")
: rank_all_runways(; features=(; feature_mask=(:), feature_string="(:)"))
: rank_all_runways(; features=(; feature_mask=(1:2), feature_string="(1:2)"))
- extract with
: (; min_errs, max_errs) = deserialize("min_max_errors_results_(1:2)")
: sort(max_errs; by=k->max_errs[k][1])
** Height

** Noise magnitude scaling
We find that all the errors scale approximately linearly with the noise magnitude.
We always compute with \(\sigma = 1\mathrm{pxl}\), i.e. the location error in pixel space is approximately distributed as a standard Gaussian.
** Show the influence of correlated noise
Correlated noise, i.e. xs mutually correlated, ys correlated, but not xs/ys, increases crosstrack error, but reduces alongtrack error.
|            |   | uncorr |        |        |   |   corr |        |        |
|            |   |      x |      y |      z |   |      x |      y |      z |
|------------+---+--------+--------+--------+---+--------+--------+--------|
| near       |   | 150.71 | 0.5720 | 3.2016 |   | 48.163 | 0.7758 | 1.2611 |
| near & far |   | 100.01 | 0.4738 | 1.9137 |   | 40.031 | 0.8848 | 1.4775 |
| all        |   | 3.5399 | 0.3140 | 0.3208 |   | 1.2871 | 1.0155 | 1.0310 |

We don't make statements about using other runway measurements, because we don't know the correlation patterns there.
*** Near


** Show the impact of using angular measurements with some error.
*** (1:2)
No noise:
: 149.8787156111555
:   0.5832269893203661
:   3.162242097807416
With noise:
: 148.68609231550772
:  66.55432806506772
:  60.33363881208062

*** (:)
No noise:
: 3.838621143108616
: 0.3269586694016983
: 0.32742992303926616
With noise
: 60.84696311184394
: 84.13550220758722
: 83.17166785071895
*** Conclusions
We can see that using more runway features does not "protect" us from suffering massive prediction errors in y- and z-direction.
Interestingly, the x-direction barely changes.


* Other report: [[file:~/Documents/SensitivityReport/sensitivity-report.org]]
* Report overview
- we currently only observe front two corners.
- what's the real error distribution in x/y? are the errors correlated?
- how do errors in x/y influence our pose estimate?
- how does it change with alongtrack distance? height? crosstrack error?
- how do error correlations influence our pose estimate?
- how do errors in rotation influence our pose estimate?
- can we improve by taking four corners?
- can we improve by taking edge angles?
- can we improve by considering other runways?

** Simulation
- we retrieve real runway data from a database (=2307 A3 Reference Data_v2.xlsx=).
- our default case will be KABQ, [-6000m, 0m, 1.2\degree]
- we solve the problem similar to how opencv solves it: given known 3D datapoints, and assuming a pose, we project the 3D datapoints onto the screen and compare with the actual measurements.
- then we use an optimization method to minimize the squared sum of errors in x and y direcetion (screen coordinates).
- specifically, we use the Levenberg-Marquardt algorithm (same as OpenCV) provided by LsqFit.jl.
  We also tried other algorithms, but generally observed worse performance, specifically when other measurements like angles are also taken into account.

- Using this simulation allowed us to simulate different error distributions, airplane positions and orientations, and runway setups and approaches.
- There also has been some work on processing uncertainty estimates, although this will not be included in this report.
** Empirical results
*** Measurement Error Distribution and Correlations
/The results in this section may be reproduced by the notebook located at https://github.com/airbus-wayfinder/PNPSolve.jl/blob/main/notebooks/error_distribution.jl
using input data located at =login2:/home/romeo.valentin.int/vnv_processing/vnv_with_manual_Q3_pre_release.csv=./

- Distribution full service volume (1332 samples)
[[file:figs/error_distribution_in_service_volume.pdf]]
- Distribution extreme service volume (105 samples)
[[file:figs/error_distribution_in_extreme_service_volume.pdf]]

**** Interude: Normal or Cauchy? :noexport:
[[file:figs/normal_vs_cauchy.pdf]]
- \(\mathcal{N}\left(\mu==-0.58, \sigma=1.14\right)\)
- \(\mathit{Cauchy}\left(\mu=-0.67, \sigma=0.78\right)\)

**** Correlations
We can also wonder if the errors are correlated. For example, when we are predicting the near left corner too far to the right, do we also predict the far left corner too far to the right?
What about relations between left-right and up-down?
In [[fig:error-correlations]] we see that there is indeed a strong correlation between all for corners, such that all x predictions are correlated, and all y predictions are correlated; however x and y do not seem to be correlated.

#+name: fig:error-correlations
file:figs/error_correlations.pdf

#+name: fig:error-correlations-extreme
file:figs/error_correlations_extreme.pdf

Inspecting the
**** Conclusion
For the further studies, we will proceed with the assumption that errors are sampled from a zero-mean Gaussian with one pixel of standard deviation, which seems approximately justified.
In general we will consider the uncorrelated case (although somewhat misspecified given the above results), however we will also briefly consider the correlated case.

We do note, however, that a Gaussian distribution may underestimate the "heavy tails".
In other words, the following results may be overly optimistic.

*** Simulation study
**** We study the effects of considering the following perturbations and features:
- near corners, near&far corners, corners from other runways
- sideline angles
- non-straight approach attitude
- error in attitude estimation
- consistency across different runways (KABQ, KSFO, ...)

**** Baseline setup:
- Our default case will be the runway KABQ (Albuquerque), positioned at an alongtrack distance of (negative) \(\qty{6000}{\meter}\), horizontally centered (i.e. no crosstrack error), and with a vertical angle of \(\qty{1.2}{\degree}\).
  Note that the crosstrack and height values are chosen such that they lie on the extreme of the service boundary.

- Estimation using near two corners, equal weighting in x/y direction.
- Measurement errors are sampled by adding zero-mean Gaussian noise with one pixel of standard deviation.
  (This is roughly consistent with the real error distribution in decent conditions, see [[sec:realmeasurementerrors]].)
- We start with an initial guess that is set to the true location plus three samples from a zero-mean Gaussian with 50 meters of standard deviation.[fn:1]

**** Error distribution for different alongtrack distances.
We start by investigating the error distribution of the pose estimate resulting from randomly sampled measurement noise, and evaluated at different alongtrack distances.

- [[fig:distance-variation-1-2]] shows the resulting error distributions (median, 25th and 75th percentile, approximate 99th percentile)
  for different alongtrack distances given the baseline setup described aboove.
- Note that we additionally report the error requirements specifified in the MPVS.
- Instructions for reproducing the figures are given in [[sec:reproducing-barplots]].

#+attr_org: :width 300px
#+name: fig:distance-variation-1-2
#+caption: We plot the distribution of position estimate errors using the two near corners (i.e. features 1:2) for different alongtrack distances, and report median, quartiles, and approximate 99th percentiles.
[[file:./figs/distance_variation_1:2_approach=1_.png]]

- We can observe that the y (crosstrack) and z (height) directions are indeed well within spec, and will likely still easily be in spec even given significantly larger pixel errors.
  However, the x (alongtrack) direction does not have such a large margin for error, although the requirements are just about satisfied at the current level.

- In order to interpret these results, let's recall the following caveats:
  1. We assume both near corners are perfectly visible;
  2. Despite the runway being fully visible, in some situations we may have larger pixel errors than assumed here, which will increase these error distributions (approximately linearly, see [[sec:scaling-error]]);
  3. We assume a dead-straight attitude and no attitude error (we explore violating these assumptions in [[sec:attitude-errors]]).

- Next, we will explore the effects of adding other runway and angular features, and then consider what happens when some of our assumptions are violated.

**** Beyond near corners.
#+name: fig:overview
#+caption: Overview over possible zeroth and first order image features to predict.
#+attr_latex: :width 0.5\textwidth
#+attr_org: :width 50%
[[file:/Users/romeovalentin/Documents/PNPSolve/notebooks/figs/overview2.png]]

We will now consider what features  beyond the near corner one could consider adding to the system.
For example, we can add additional markings of current or other runways, features of the environment, and also consider "derived" features like the approach angle.

We start by classifying possible features into three categories, moving from features directly in pixel-space to more abstract features, ultimately ending up at directly predicting the position.
- Zeroth order: Pixel-space predictions. :: \hfill
  + feature locations or pixel indices, e.g. the location of the runway corners in image/pixel space
  + notice that depending on whether we predict a location or a pixel index, we can phrase the problem as a /classification/ or a /regression/ problem.
- First order: Image-space derivatives. :: \hfill
  + features which can be "drawn into" the image space, e.g. projected threshold width, projected runway length, (enclosed) sideline angles
  # - also (continuous) projection coordinates in $[0, 1]^2$ (instead of in $\mathcal{I}_y\times \mathcal{I}_y$).
  + notice that all of these predictions are now /regression/ problems.
- Second order: Beyond the image space. :: \hfill
  + Direct position prediction
  + Another "orthogonal basis", e.g. Nima's angular representation
  + Other angles
In [[fig:overview]] we provide a basic overview over zeroth and first order features.



#+name: fig:1-4-and-all-side-by-side
#+caption: Side by side example.
#+begin_figure
#+latex: \centering
#+attr_latex: :options {0.45\textwidth}
#+begin_subcaptionblock
[[file:./figs/distance_variation_1:4_approach=1_.png]]
\caption{Results using all four corners of the approaching runway.}
#+end_subcaptionblock
#+attr_latex: :options {0.45\textwidth}
#+begin_subcaptionblock
[[file:./figs/distance_variation_:_approach=6.png]]
\caption{Results using all four corners of all runways.}
#+end_subcaptionblock
#+end_figure

For now, let us stick to "zeroth order" features, and consider adding the far runway corners, and additionally measuring runway corners from other runways.
[[fig:1-4-and-all-side-by-side]] presents the results for that setup.
First, we notice an improvement by using the far corners of approximately \((33%, 15%, 40%)\) for \((x,y,z)\), respectively.
The improvements in x and z directions can be rationalized by realizing that using these points, we can measure "vertical projection length" in the image plane (i.e. \(\Delta x\) in [[fig:overview]]), which strongly correlates with alongtrack position and height.
However, we notice that the errors in x-direction still have a fairly wide spread.

The reason for the significantly worse precision in x-direction is easy to rationalize.
The position estimation from image correspondences roughly corresponds to finding the intersection (or closest point) of two almost parallel rays which pass through the camera plane and the 3d correspondences.
A small error in the specifics of the rays corresponds in the intersection being moved drastically along the ray's directions -- which corresponds to our alongtrack estimate.[fn:2]

It is therefore natural to consider also landmarks that lie in a direction different to the alongtrack direction.
The results of this are pictured on the right side in [[fig:1-4-and-all-side-by-side]], and indeed we see that the alongtrack performance is massively improved!
Interestingly, we also see that the performance drops again closer to the runway, presumably because some threshold corners go out of sight.
Notice that we still assume the same error distribution for those detections -- however due to the sharp angle, the real error distributions might be larger, and these results may be overly optimistic.

It is also important to note that while these results are promising, if we design the system such that it requires relying on other runways to be in sight, we are severely limiting the systems applicability to airports with multiple runways, and assume all of them to be clearly in sight (no occlusion etc).
However, this technique may be used to further boost performance of an already certifiable system.
***** old stuff :noexport:
# - One shorter runways, using only near or near & far is just about enough when \(\sigma = 1\mathrm{pxl}\).

# We also measure the estimation errors for larger measurement noise values, and find that for this setup, the estimation errors reliably scale with the magnitude of the estimation errors.

- Next, we consider all four corners at the same time, and see if this improves our results ([[fig:distance-variation-1-4]])
#+name: fig:distance-variation-1-4
#+caption: Some caption.
#+attr_org: :width 300px
[[file:./figs/distance_variation_1:4_approach=1_.png]]
# - At this point, we note that the results ultimately rely on the specifics of the runway; in particular the runway with, and possibly the runway length.
#   For reference, the runway considered is approximately \(\qty{3000}{\meter}\) long and \(\qty{65}{\meter}\) wide.

# However, we can take information from other runways and incorporate them, which yields substantial benefits while the other runways are in sight.
# To illustrate, consider [[fig:distance-variation-all-approach-1]] and [[fig:distance-variation-all-approach-4]].
# We first notice that the alongtrack position estimate is massively improved over previous approaches.
# However, there is a clear performance drop once they go out of sight.

# #+name: fig:distance-variation-all-approach-1
# #+caption: Some caption
# #+attr_org: :width 300px
# [[file:figs/distance_variation_all_approach=1_.png]]
# #+name: fig:distance-variation-all-approach-4
# #+attr_org: :width 300px
# [[file:figs/distance_variation_all_approach=4_.png]]

**** First order features: Including angular measurements
In the previous section we have seen the effect of including different pixel features, i.e. runway corners from the approaching or other runways.

Now also consider adding additional information: the left and right sidelines angles of the approaching runway (i.e. \(\gamma_{\rm lhs}\) and \(\gamma_{\rm rhs}\) in [[fig:overview]]).

We first note that adding these features seems to make the numerical optimization much more unstable, requiring a more sophisticated solving optimizer and having convergence problems if the initializations are not great (especially if the optimization is initialized with a lesser height than the true solution).

In [[tbl:angular-measurements]] we report the prediction performances at different noise levels.
We notice that already one degree of angular noise results in worse prediction performance than using no angular measurements at all.
However, the results can be improved somewhat if there is very little noise -- however even then the improvements are not great, as the optimization still needs to take the noise near corners into account.
A re-weighting scheme based on the angle sensitivities and error distributions could, improve the results -- however we also found that larger weights for the angular terms resulted in more numerical instability.

#+name: tbl:angular-measurements
#+caption: Prediction errors when using sideline angle measurements with different levels of noise, and compared against a baseline (last column).
#+begin_table
| σ_angle |   0.0° |  0.01° |   0.1° |   0.3° |   0.5° |   1.0° | no angles |
|---------+--------+--------+--------+--------+--------+--------+-----------|
| σ_x     | 101.22 | 104.61 | 105.89 | 110.58 | 122.37 | 159.51 |    156.54 |
| σ_y     | 0.3863 | 0.3967 | 0.3986 | 0.4267 | 0.4869 | 0.5968 |    0.5678 |
| σ_z     | 2.1189 | 2.1929 | 2.2021 | 2.3073 | 2.5945 | 3.4132 |    3.3251 |
#+end_table


**** Further assumptions: Linear error scaling and different runways <<sec:scaling-error>>
#+name: fig:pixel-error-comparison
#+caption: Side by side example.
#+begin_figure
#+latex: \centering
#+attr_latex: :options {0.32\textwidth}
#+begin_subcaptionblock
[[file:figs/distance_variation_:_approach=4.png]]
\caption{One pixel of standard error.}
#+end_subcaptionblock
#+attr_latex: :options {0.32\textwidth}
#+begin_subcaptionblock
[[file:figs/distance_variation_:_approach=4_2pxl.png]]
\caption{Two pixels of standard error.}
#+end_subcaptionblock
#+attr_latex: :options {0.32\textwidth}
#+begin_subcaptionblock
[[file:figs/distance_variation_:_approach=4_10pxl.png]]
\caption{Ten pixels of standard error.}
#+end_subcaptionblock
#+end_figure

It seems empirically correct that the position estimation errors scale linearly with the feature location errors, see e.g. the comparison in [[fig:pixel-error-comparison]].
However, we do note that it's not clear whether this also holds for more "nonstandard" setups, for example when the attitude wrt the runway is misaligned, and all features are located at a "sharp angle".

Another related question that is whether our results actually hold for the majority of the runways.
To answer this question, we have rerun the basic setup (with near corners and all visible corners) for every runway listed in the datasheet, which includes about 2000 runways.
Indeed we find significant variance, however more data is required.
#latex: \todo{Collect this data.}


**** Further assumptions: Attitude errors <<sec:attitude-errors>>
/Reproduce:/
: julia> let feature_mask=(1:2),
:            σ_rot=1.0°
:          df = make_alongtrack_distance_df(; feature_mask, σ_rot, sample_rotations=true,
:                                             N_measurements=1000, distances=(6000:6000).*1m)
:          std.(eachcol(df)[[:err_x, :err_y, :err_z]])
:        end

# We only report \(1\sigma\). Recall you can approximately say
# - 68% fall in \([-\sigma, \sigma]\),
# - 90% fall in \([-1.5\sigma, 1.5\sigma]\), and
# - 99% \([-2.5\sigma, 2.5\sigma]\).

Finally, we explore if the results also hold when we're not facing the runway straight on.
Note that we still assume that we know the precise aircraft orientation/attitude, but we now sample that attitude as follows:
We start with a straight heading (as before).
Then, we sample a random vector in the Unit sphere, and sample an angle from a zero-mean Gaussian with a given standard deviation.
The orientation is then rotated around the sampled vector by the sampled orientation.

The results when taking features from all runways are presented in [[tbl:misaligned-attitude-all]].
Tables for only near- and near-far corners are found in the appendix.

#+name: tbl:misaligned-attitude-all
#+caption: Features: (all)
#+begin_table
 | \sigma_angle |  0.0° |  5.0° | 10.0° | 15.0° | 20.0° | 25.0° | 30.0° | 35.0° | 40.0° | 45.0° |
 |--------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------|
 | \sigma_x     | 3.622 | 4.034 | 15.41 | 43.16 | 62.25 | 71.97 | 77.04 | 89.72 | 81.32 | 86.64 |
 | \sigma_y     | 0.319 | 0.350 | 4.641 | 32.24 | 46.76 | 55.61 | 63.67 | 68.68 | 71.67 | 74.78 |
 | \sigma_z     | 0.327 | 0.333 | 1.242 | 14.29 | 21.11 | 27.26 | 29.89 | 31.37 | 35.46 | 36.69 |
#+end_table

***** data :noexport:
****** Features 1:2
******* formatted
******* raw :noexport:
[ Info: 0.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -2.16814  -0.00283   0.0337371
 153.379     0.581112  3.26735
[ Info: 5.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -1.21947  0.0660953  -0.0285781
 151.425    3.4841      3.74225
[ Info: 10.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -11.5514   0.0548323   0.264447
 199.26    27.3165     14.0665
[ Info: 15.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -14.7415   0.364262   0.519558
 193.49    45.6259    22.877
[ Info: 20.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -9.21481   0.196593   0.484496
 217.494    56.7308    28.9801
[ Info: 25.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -11.4776   0.59367   0.808493
 211.487   66.3532   33.2873
[ Info: 30.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -12.9262  -0.565817  -0.535161
 205.019   70.5194    34.7356
[ Info: 35.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -12.3143   0.483048   1.00353
 181.907   75.8419    37.4242
[ Info: 40.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -11.1313  -2.99233   0.620182
 206.601   79.315    38.6841
[ Info: 45.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -5.26704   0.0479666   0.488847
 173.934    81.2017     40.707
[ Info: 50.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -10.9768  -1.02146  -0.351597
 169.441   81.738    41.6722
[ Info: 55.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -2.00435  -0.835736   0.265345
 157.637    84.242     41.5165
[ Info: 60.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -6.77991   0.841156   0.686087
 169.155    85.6169    42.5281
****** Features 1:4
******* formatted
******* raw :noexport:
[ Info: 0.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -3.19696  0.0075285  0.0502635
 100.454    0.495195   1.94139
[ Info: 5.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
   0.261094  0.0647815  0.0592448
 100.388     4.87517    3.37197
[ Info: 10.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -2.82626   0.564647  -0.155263
 111.925    27.8923    13.9433
[ Info: 15.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -0.194517  -0.244625  -0.0906993
 138.364     44.957     22.912
[ Info: 20.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -2.58071   0.0682961   0.0576568
 117.993    56.7076     27.9676
[ Info: 25.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -0.904429   0.698025   0.226501
 124.327     66.6036    32.681
[ Info: 30.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -3.62445   2.03755  -0.76615
 147.533    70.5756   35.8625
[ Info: 35.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -3.98871   0.558398   0.226711
 123.186    74.8716    37.5796
[ Info: 40.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -6.8241   0.0663825  -0.092881
 132.455   78.4469     39.1741
[ Info: 45.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -1.41516  -0.150595   0.0492371
 131.658    80.4602    40.1788
[ Info: 50.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -2.74761  -2.078    0.314863
 143.56     83.4171  41.075
[ Info: 55.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -1.03709   0.833214   0.00498697
 143.201    83.3268    41.8895
[ Info: 60.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  -3.57759  -1.05411  -0.455763
 126.379    83.2375   43.2943
****** Features (:)
******* formatted

******* raw :noexport:
[ Info: 0.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 0.028292  0.0030881  -0.00489142
 3.62234   0.319877    0.327784
[ Info: 5.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -0.0420827  -0.00742929  0.00329768
  3.95995     0.335672    0.339709
[ Info: 10.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -0.671178  -0.0376517  0.113909
 15.419      4.64131    1.24272
[ Info: 15.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  0.388351   0.412988   0.215115
 43.1642    32.248     14.2915
[ Info: 20.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -0.26043  -0.857926   0.145583
 62.2505   46.7632    21.1139
[ Info: 25.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  1.57955   0.704326   0.137833
 71.9703   55.6119    27.2698
[ Info: 30.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  2.89698  -0.613564   0.0935092
 77.0481   63.6783    29.8971
[ Info: 35.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  0.0893006  -0.364597   0.558895
 89.7247     68.6814    31.3763
[ Info: 40.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  0.500785  -1.02141  -0.837706
 81.3209    71.6772   35.4608
[ Info: 45.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -1.72685  -1.02941  -0.971258
 86.6457   74.7806   36.6963
[ Info: 50.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  3.38091  -2.73956   0.301559
 87.389    78.7439   37.4007
[ Info: 55.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
 -0.015958   0.998094  -0.145212
 91.1766    78.1907    38.3517
[ Info: 60.0°
[ Info: [mean ; std] for x,y,z:
2×3 Matrix{Float64}:
  0.421176   0.171872   0.493875
 85.9156    80.2746    39.7789
** Real measurement errors  <<sec:realmeasurementerrors>>

* Appendix
** Correlations
Correlation values (in service volume):
\[\mathit{corr}(\begin{bmatrix}x \\ y \end{bmatrix}, \begin{bmatrix}x \\ y \end{bmatrix}) =
% \frac{\mathit{cov}(\begin{bmatrix}x \\ y \end{bmatrix}, \begin{bmatrix}x \\ y \end{bmatrix})}{\sigma^2} =
\left[\begin{array}{cccc|cccc}
  1.0 &  0.92 &  0.98 &  0.93 & -0.05 & -0.05 & -0.04 & -0.04  \\
  0.92 &  1.0 &  0.91 &  0.95 & -0.18 & -0.19 & -0.18 & -0.19 \\
  0.98 &  0.91 &  1.0 &  0.93 & -0.04 & -0.05 & -0.03 & -0.03 \\
  0.93 &  0.95 &  0.93 &  1.0 &  -0.2 &  -0.2 &  -0.19 & -0.2 \\ \hline
 -0.05 & -0.18 & -0.04 & -0.2 &  1.0 &  1.0 &  1.0 &  1.0 \\
 -0.05 & -0.19 & -0.05 & -0.2 &  1.0 &  1.0 &  0.99 &  1.0 \\
 -0.04 & -0.18 & -0.03 & -0.19 &  1.0 &  0.99 &  1.0 &  1.0 \\
 -0.04 & -0.19 & -0.03 & -0.2 &  1.0 &  1.0 &  1.0 &  1.0
\end{array}\right] \]
** Misaligned Attitude, more tables
#+caption: Features: (1:2)
#+begin_table
 | \sigma_angle |  0.0° |  5.0° | 10.0° | 15.0° | 20.0° | 25.0° | 30.0° | 35.0° | 40.0° | 45.0° |
 |--------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------|
 | \sigma_x     | 153.3 | 151.4 | 199.2 | 193.4 | 217.4 | 211.4 | 205.0 | 181.9 | 206.6 | 173.9 |
 | \sigma_y     | 0.581 | 3.484 | 27.31 | 45.62 | 56.73 | 66.35 | 70.51 | 75.84 | 79.31 | 81.20 |
 | \sigma_z     | 3.267 | 3.742 | 14.06 | 22.87 | 28.98 | 33.28 | 34.73 | 37.42 | 38.68 | 40.70 |
#+end_table

#+caption: Features: (1:4)
#+begin_table
#+latex: \centering
| \sigma_angle |  0.0° |  5.0° | 10.0° | 15.0° | 20.0° | 25.0° | 30.0° | 35.0° | 40.0° | 45.0° |
|--------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------|
| \sigma_x     | 100.4 | 100.3 | 111.9 | 138.3 | 117.9 | 124.3 | 147.5 | 123.1 | 132.4 | 131.6 |
| \sigma_y     | 0.495 | 4.875 | 27.89 | 44.95 | 56.70 | 66.60 | 70.57 | 74.87 | 78.44 | 80.46 |
| \sigma_z     | 1.941 | 3.371 | 13.94 | 22.91 | 27.96 | 32.68 | 35.86 | 37.57 | 39.17 | 40.17 |
#+end_table

** Simulation study
: julia> plot_alongtrack_distance_errors(; distances=(300:100:6000).*1m, features=(;feature_mask=(1:2), feature_str="1:2"), N_measurements=2_000, approach_idx=1, σ_pxl=1.0pxl, draw_requirements=true, correlated_noise=false, runway_args=(; ICAO="KABQ", approach_idx=1), savefig=true)
: julia> plot_alongtrack_distance_errors(; distances=(300:100:6000).*1m, features=(;feature_mask=(1:4), feature_str="1:4"), N_measurements=2_000, approach_idx=1, σ_pxl=1.0pxl, draw_requirements=true, correlated_noise=false, runway_args=(; ICAO="KABQ", approach_idx=1), savefig=true)
:
: julia> plot_alongtrack_distance_errors(; distances=(300:100:6000).*1m, features=(;feature_mask=(:), feature_str="all"), N_measurements=2_000, approach_idx=1, σ_pxl=1.0pxl, draw_requirements=true, correlated_noise=false, runway_args=(; ICAO="KABQ", approach_idx=1), savefig=true)
:
: julia> plot_alongtrack_distance_errors(; distances=(300:100:6000).*1m, features=(;feature_mask=(:), feature_str="all"), N_measurements=2_000, approach_idx=1, σ_pxl=1.0pxl, draw_requirements=true, correlated_noise=false, runway_args=(; ICAO="KABQ", approach_idx=4), savefig=true)
** Reproducing the results
*** Barplots for estimation errors  <<sec:reproducing-barplots>>
* Footnotes
[fn:2]Notice that this problem is directly related to the condition number of a 2x2 matrix, which is roughly speaking poorly conditioned when the column vectors (i.e. ray directions) are almost parallel and singular if they are exactly parallel.

[fn:1]We find that the basic optimization is relatively robust to initialization, but becomes more sensitive when more measurements, like angles, are added.
